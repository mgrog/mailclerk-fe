/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Associatedemailclientcategory = "CATEGORY_PERSONAL" | "CATEGORY_PROMOTIONS" | "CATEGORY_SOCIAL" | "CATEGORY_UPDATES";

export type CleanupAction = "ARCHIVE" | "DELETE" | "NOTHING";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type SubscriptionStatus = "ACTIVE" | "CANCELLED" | "PAST_DUE" | "UNPAID";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface AutoCleanupSetting {
  afterDaysOld: Generated<number>;
  cleanupAction: Generated<CleanupAction>;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  mailLabel: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface CustomEmailRule {
  associatedEmailClientCategory: Associatedemailclientcategory | null;
  createdAt: Generated<Timestamp>;
  description: string;
  id: Generated<number>;
  mailLabel: string;
  name: string;
  promptContent: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface DefaultEmailRuleOverride {
  associatedEmailClientCategory: Associatedemailclientcategory | null;
  category: string;
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  isDisabled: Generated<boolean>;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface EmailTraining {
  aiAnswer: string;
  body: string;
  confidence: number;
  emailId: string;
  from: string;
  heuristicsUsed: Generated<boolean>;
  id: Generated<number>;
  subject: string;
  userEmail: string;
}

export interface ProcessedDailySummary {
  createdAt: Generated<Timestamp>;
  id: Generated<number>;
  userId: number;
}

export interface ProcessedEmail {
  aiAnswer: string;
  category: string;
  id: string;
  labelsApplied: Generated<string[] | null>;
  labelsRemoved: Generated<string[] | null>;
  processedAt: Generated<Timestamp>;
  userId: number;
}

export interface User {
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<number>;
  lastPaymentAttemptAt: Timestamp | null;
  lastSuccessfulPaymentAt: Timestamp | null;
  setupCompleted: Generated<boolean>;
  subscriptionStatus: Generated<SubscriptionStatus>;
  updatedAt: Generated<Timestamp>;
}

export interface UserAccountAccess {
  accessToken: string;
  createdAt: Generated<Timestamp>;
  expiresAt: Timestamp;
  id: Generated<number>;
  needsReauthentication: Generated<boolean>;
  refreshToken: string;
  updatedAt: Generated<Timestamp>;
  userEmail: string;
}

export interface UserTokenUsageStat {
  createdAt: Generated<Timestamp>;
  date: Generated<Timestamp>;
  id: Generated<number>;
  month: Generated<number>;
  tokensConsumed: Generated<Int8>;
  updatedAt: Generated<Timestamp>;
  userEmail: string;
  year: Generated<number>;
}

export interface DB {
  autoCleanupSetting: AutoCleanupSetting;
  customEmailRule: CustomEmailRule;
  defaultEmailRuleOverride: DefaultEmailRuleOverride;
  emailTraining: EmailTraining;
  processedDailySummary: ProcessedDailySummary;
  processedEmail: ProcessedEmail;
  user: User;
  userAccountAccess: UserAccountAccess;
  userTokenUsageStat: UserTokenUsageStat;
}
